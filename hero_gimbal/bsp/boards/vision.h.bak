#ifndef _bspvision_h
#define _bspvision_h
#include "main.h"
#define VISION_HUART huart6
#define VISION_MAX_LEN 50
#define VISION_BUFLEN 11
#define VISION_SEND 4
typedef struct
{
    union
    {
        uint8_t buff[4];
        float value;
    } vision_yaw_value;
    union
    {
        uint8_t buff[4];
        float value;
    } vision_pitch_value;

    uint8_t	  identify_target;	//视野内是否有目标/是否识别到了目标   0否  1是
} VisionValueType;
extern VisionValueType VisionValue;
extern uint8_t vision_buf[];

typedef struct
{
    unsigned char dataReset;
    float yaw[2];         //相对于root的yaw，pitch角度
    float pitch[2];       //0：为初始数据    1：状态更新方程之后的数据
    float yawE[2];         //相对于root的yaw，pitch角度
    float pitchE[2];       //0：为初始数据    1：状态更新方程之后的数据
    float yawRate[2];     //yaw，pitch的角速度
    float pitchRate[2];   //0：为初始数据    1：状态更新方程之后的数据
    float yawAcc[2];     //yaw，pitch的加速度
    float pitchAcc[2];   //0：为初始数据    1：状态更新方程之后的数据
    float yawJerk[2];     //yaw，pitch的急动度
    float pitchJerk[2];   //0：为初始数据    1：状态更新方程之后的数据
    float yawX;
    float pitchX;           //状态外推数据
    float yawRateX;
    float pitchRateX;
    float yawAccX;
    float pitchAccX;
    float yawJerkX;
    float pitchJerkX;
    float yawOut;        //最终预判位置
    float pitchOut;
    /*new*/
    float distanceX;
    float distanceRateX;
    float distanceAccX;
    float distance[2];
    float distanceRate[2];
    float distanceAcc[2];

    float angle;
    float angleOut;
    float carRate;
    float flyTime;
} followStruct;					//自瞄运算数据


extern uint8_t Vision_Send_Buff[1];

void vision_callback_handler(uint8_t *buff);
void vision_buff_package(uint8_t mode,uint8_t level);
#endif


