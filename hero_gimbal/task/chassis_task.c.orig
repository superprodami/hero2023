#include "chassis_task.h"
#include "arm_math.h"
#include "param.h"
#include "type.h"
#include "mysystem.h"
#include "judge.h"
volatile eChassisAction actChassis = CHASSIS_NORMAL; //默认底盘不跟随云台行走
eChassisAction actChassis_last = CHASSIS_NORMAL;
eChassisCtrlMode  modeChassis = CHASSIS_GYRO_MODE; //默认为陀螺仪模式行走

Motortype Chassis_Motor[4];

Chassis_Speed absolute_chassis_speed;
int16_t chassis_setspeed[4];    //四个轮子目标转速

PidTypeDef Chassis_Follow_PID;
fp32 chassisnothing[3] = {0, 0, 0};
const static fp32 motorid1_speed_pid[3] = {22, 1, 0}; //20, 0.8, 0
const static fp32 motorid2_speed_pid[3] = {22, 1, 0};
const static fp32 motorid3_speed_pid[3] = {22, 1, 0};
const static fp32 motorid4_speed_pid[3] = {22, 1, 0};
const static fp32 Chassis_Follow_pid[3] = {0.000005, 0, 0.000001};

/**
  * @brief  底盘各参数初始化
  * @param  void
  * @retval void
  * @attention void
  */
static void Chassis_InitArgument(void)
{
    //底盘跟随专用
    pid_init(&Chassis_Follow_PID);//PidTypeDef *pid,           mode,     fp32 PID[3],  max_out,   max_iout, I_Separation, Dead_Zone,    gama, angle_max,  angle_min
    Chassis_Follow_PID.f_param_init(&Chassis_Follow_PID, PID_POSITION, Chassis_Follow_pid, 3.0,     0.003,     1e30,          10,       0.2,    8192,         0);

    /******************底盘电机PID*****************************************/
    //Motortype*motor,int ID,float pid1[3],                                  float pid2[3],                outmax2,imax2  I_Separation, Dead_Zone, gama, angle_max,  angle_min
    Motor_Init(&Chassis_Motor[0], 1, chassisnothing, PID_DELTA, 0, 0, 0, 0, 0, 0, 0, motorid1_speed_pid, PID_DELTA, 20000, 10000, 3e38,         0,         0.1,  0, 0);
    Motor_Init(&Chassis_Motor[1], 2, chassisnothing, PID_DELTA, 0, 0, 0, 0, 0, 0, 0, motorid2_speed_pid, PID_DELTA, 20000, 10000, 3e38,         0,         0.1,  0, 0);
    Motor_Init(&Chassis_Motor[2], 3, chassisnothing, PID_DELTA, 0, 0, 0, 0, 0, 0, 0, motorid3_speed_pid, PID_DELTA, 20000, 10000, 3e38,         0,         0.1,  0, 0);
    Motor_Init(&Chassis_Motor[3], 4, chassisnothing, PID_DELTA, 0, 0, 0, 0, 0, 0, 0, motorid4_speed_pid, PID_DELTA, 20000, 10000, 3e38,         0,         0.1,  0, 0);

}
void ChassisFun(void const *argument)
{
    portTickType currentTime;

    Chassis_InitArgument();

    while(1)
    {
        currentTime = xTaskGetTickCount();//当前系统时间
        if(imu_init_finish_flag)
        {
            switch(ControlMode)
            {
            case KEYBOARD:
            {
                if(SystemValue == Starting)
                {
                    //Chassis_open_init();
                    SystemValue = Running;      //系统初始化结束
                }
                else
                {
                    Chassis_Mode_Choose();     //设置车辆所处环境
                    KeyboardControlChassis();
                }
                break;
            }
            case REMOTE:
            {
                if(SystemValue == Starting)
                {
                    //Chassis_open_init();
                    SystemValue = Running;      //系统初始化结束
                }
                else
                {
                    if(rc.sw1 == 1 && rc.sw2 == 3)
                    actChassis = CHASSIS_FOLLOW_GIMBAL;  //底盘跟随云台
                else if(rc.sw1 == 1 && rc.sw2 == 2)
                    actChassis = CHASSIS_NORMAL;  //底盘不跟随云台
                else if(rc.sw1 == 1 && rc.sw2 == 1)
                    actChassis = CHASSIS_GYROSCOPE;    //小陀螺模式

                RemoteControlChassis();
                CHASSIS_Single_Loop_Out();
                }
                
                break;
            }
            default:
                break;
            }
            vTaskDelayUntil(&currentTime, TIME_STAMP_2MS);//绝对延时
        }
    }
}

/**
  * @brief  底盘电机输出
  * @param  void
  * @retval void
  * @attention
  */
static void CHASSIS_Single_Loop_Out()
{
    if(actChassis == CHASSIS_GYROSCOPE || actChassis == CHASSIS_NORMAL)
    {
        Absolute_Cal(&absolute_chassis_speed, (float)(GIMBAL_YAW_ENCODER_MIDDLE1 - Gimbal_MotorYaw.motor_value->main_angle) * 0.043945f);
    }
    else
    {
        Absolute_Cal(&absolute_chassis_speed, 0);
    }
    Mecanum_Set_Motor_Speed(chassis_setspeed, Chassis_Motor); //设置各个电机的目标速度
    /************************************底盘电机速度环计算*********************************************/
    Chassis_Motor[0].Motor_PID_Speed.f_cal_pid(&Chassis_Motor[0].Motor_PID_Speed,
            Chassis_Motor[0].motor_value->speed_rpm,
            -Chassis_Motor[0].motor_value->target_speed_rpm);

    Chassis_Motor[1].Motor_PID_Speed.f_cal_pid(&Chassis_Motor[1].Motor_PID_Speed,
            Chassis_Motor[1].motor_value->speed_rpm,
            +Chassis_Motor[1].motor_value->target_speed_rpm);

    Chassis_Motor[2].Motor_PID_Speed.f_cal_pid(&Chassis_Motor[2].Motor_PID_Speed,
            Chassis_Motor[2].motor_value->speed_rpm,
            -Chassis_Motor[2].motor_value->target_speed_rpm);

    Chassis_Motor[3].Motor_PID_Speed.f_cal_pid(&Chassis_Motor[3].Motor_PID_Speed,
            Chassis_Motor[3].motor_value->speed_rpm,
            +Chassis_Motor[3].motor_value->target_speed_rpm);
    /************************************将电流参数发送给电机*********************************************/
    Chassis_Power_Limit();//功率限制,电流重新分配
    set_chassis_current(&hcan1, Chassis_Motor[0].Motor_PID_Speed.out,
                        Chassis_Motor[1].Motor_PID_Speed.out,
                        Chassis_Motor[2].Motor_PID_Speed.out,
                        Chassis_Motor[3].Motor_PID_Speed.out);
    //    set_chassis_current(&hcan1, 0, 0, 0, 0);
    /*can1底盘轮子1234 5YAW 6拨弹盘 78空
    can2 1空 2摩擦轮l 3摩擦轮r 4空 5PITCH 678空*/

}

/***********************************************************************************下面的部分是遥控器模式**********************************************************************************/
/**
  * @brief  遥控器控制方式
  * @param  void
  * @retval void
  * @attention
  */
static void RemoteControlChassis(void)
{
    /***********************************确定底盘四个电机的目标速度*****************************************/
    switch(actChassis)
    {
    case CHASSIS_FOLLOW_GIMBAL://跟随云台
        absolute_chassis_speed.vx = (float)rc.ch4 / 100;
        absolute_chassis_speed.vy = (float)rc.ch3 / 100;
        absolute_chassis_speed.vw = RAMP_float(Chassis_Follow_PID.f_cal_pid(&Chassis_Follow_PID, Find_Y_AnglePNY(), 0), absolute_chassis_speed.vw, 0.0002); //PID使底盘跟随云台速度
        break;
    case CHASSIS_NORMAL://不跟随云台
        absolute_chassis_speed.vx = (float)rc.ch4 / 50;
        absolute_chassis_speed.vy = (float)rc.ch3 / 100;
        absolute_chassis_speed.vw = 0;
        break;
    case CHASSIS_GYROSCOPE:    //小陀螺模式
        absolute_chassis_speed.vx = (float)rc.ch4 / 200;
        absolute_chassis_speed.vy = (float)rc.ch3 / 200;
        absolute_chassis_speed.vw = 0.0028;
        break;
    default:
        break;
    }
}

/***********************************************************************************下面的部分是键盘模式**********************************************************************************/
//不同模式下,斜坡函数对应的时间值,一般用普通速度就行
//#define    TIME_DEC_NORMAL           200//180//500//20   //键盘斜坡,越大减小速度越快(一般要比INC大一点,这样松开键盘能更快为0,太大则会造成底盘停下来的时候跳跃)
//#define    TIME_INC_NORMAL           10//6//4    //键盘斜坡,越大增加速度越快,完成时间越短

/************底盘各类模式的一些辅助定义*************/
float    Chassis_Standard_Move_Max;                 //底盘前后左右平移限速
int16_t  timeXFron, timeXBack, timeYLeft, timeYRigh;//键盘  s  w  d  a

//键盘模式下全向移动计算,斜坡量
float Slope_Chassis_Move_Fron, Slope_Chassis_Move_Back;
float Slope_Chassis_Move_Left, Slope_Chassis_Move_Righ;

//底盘跟随云台
bool Chass_Switch_F = 1;
u8    Chass_Key_F_Change = 0;

//45°
bool Chass_Switch_X = 1;
u8    Chass_Key_X_Change = 0;

//小陀螺
bool Chass_Switch_G = 1;
u8    Chass_Key_G_Change = 0;

//左转90度
bool Chass_Switch_Q = 1;
u8    Chass_Key_Q_Change = 0;

//右转90度
bool Chass_Switch_E = 1;
u8    Chass_Key_E_Change = 0;

//扭屁股
bool Chass_Switch_B = 1;
u8   Chass_Key_B_Change = 0;

//变为普通模式
bool Chass_Switch_R = 1;
u8   Chass_Key_R_Change = 0;

/**
  * @brief  键盘选择底盘模式
  * @param  void
  * @retval void
  * @attention 模式选择,进入某模式后记得写退出到普通模式的判断
  * 无按键按下会一直处于自动闪避模式,除了模式切换外的按键按下则处于模式切换选择模式
  */
static void Chassis_Mode_Choose()  //键盘控制下
{
    /////////////////Ctrl进入加速模式/////////////////////
//    if(IF_KEY_PRESSED_SHIFT && actChassis != CHASSIS_SZUPUP)//Ctrl一起按进入爬坡模式
//    {
//        //        Package_Frame_Float(1, 0x20); //0x20    //电容放功率
//        //        HAL_UART_Transmit_DMA(&huart6, (uint8_t *)Cap_txbuffer, 9);
//        //        Package_Frame_Float(60, 0x17); //0x17    //当前等级功率
//        //        HAL_UART_Transmit_DMA(&huart6, (uint8_t *)Cap_txbuffer, 9);
//        actChassis_last = actChassis;
//        actChassis = CHASSIS_SZUPUP;//爬坡模式
//    }
//    else if(( !IF_KEY_PRESSED_W || !IF_KEY_PRESSED_SHIFT) && actChassis == CHASSIS_SZUPUP)//松开任意一个退出爬坡模式
//    {
//        //        Package_Frame_Float(0, 0x20); //0x20    //电容放功率
//        //        HAL_UART_Transmit_DMA(&huart6, (uint8_t *)Cap_txbuffer, 9);
//        actChassis = actChassis_last;//底盘退出爬坡模式
//    }
    //////////////////F键选择底盘跟随云台/////////////////////
    if(!IF_KEY_PRESSED_F)
    {
        Chass_Switch_F = 1;
    }
    if(IF_KEY_PRESSED_F && Chass_Switch_F == 1)
    {
        Chass_Switch_F = 0;
        Chass_Key_F_Change ++;
        Chass_Key_F_Change %= 2;
        actChassis_last = actChassis;
        actChassis = CHASSIS_FOLLOW_GIMBAL;
    }
    //////////////////B键扭屁股/////////////
    if(!IF_KEY_PRESSED_B)
    {
        Chass_Switch_B = 1;
    }
    if(IF_KEY_PRESSED_B && Chass_Switch_B == 1)
    {
        Chass_Switch_B = 0;
        Chass_Key_B_Change ++;
        Chass_Key_B_Change %= 2;
        actChassis_last = actChassis;
        actChassis = CHASSIS_CORGI;
    }
    /////////////////G键选择小陀螺/////////////////////
    if(!IF_KEY_PRESSED_G)
    {
        Chass_Switch_G = 1;
    }
    if(IF_KEY_PRESSED_G && Chass_Switch_G == 1)
    {
        Chass_Switch_G = 0;
        Chass_Key_G_Change ++;
        Chass_Key_G_Change %= 2;
        actChassis_last = actChassis;
        actChassis = CHASSIS_GYROSCOPE;
    }
    /////////////////R键按下变为普通模式///////////////////
    if(!IF_KEY_PRESSED_R)
    {
        Chass_Switch_R = 1;
    }
    else if(IF_KEY_PRESSED_R && Chass_Switch_R == 1)
    {
        Chass_Switch_R = 0;
        Chass_Key_R_Change ++;
        Chass_Key_R_Change %= 2;
        actChassis_last = actChassis;
        actChassis = CHASSIS_NORMAL;
    }

}

/**
  * @brief  键盘控制方式
  * @param  void
  * @retval void
  * @attention
  */
static void KeyboardControlChassis(void)
{
    CHAS_Key_Ctrl();

    CHASSIS_Single_Loop_Out();
}

/**
  * @brief  键盘控制底盘模式
  * @param  void
  * @retval void
  * @attention
  */
static void CHAS_Key_Ctrl(void)
{
    switch (actChassis)
    {
    case CHASSIS_NORMAL:
    {
        Chassis_Keyboard_Move_Calculate(7000, 8, 30);
    }
    break;
    case CHASSIS_FOLLOW_GIMBAL:
    {
        Chassis_Keyboard_Move_Calculate(7000, 8, 30);
        Chassis_Mouse_Move_Calculate();
    }
    break;
    case CHASSIS_GYROSCOPE:
    {
        Chassis_Keyboard_Move_Calculate(7000, 8, 30);
        absolute_chassis_speed.vw = RAMP_float(0.0025, absolute_chassis_speed.vw, 0.00001);
    }
    break;
    case CHASSIS_SZUPUP:
    {
        CHASSIS_SZUPUP_Mode_Ctrl(2000, 2,2);
    }
    break;
    case CHASSIS_CORGI:
    {
        Chassis_Keyboard_Move_Calculate(7000,8, 30);
        CHASSIS_MISS_Mode_Ctrl();
    }
    default:
        break;
    }
}

/**
  * @brief  键盘模式下底盘运动计算
  * @param  速度最大输出量    增加速度(最大293)
  * @retval void
  * @attention  键盘控制前后左右平移,平移无机械和陀螺仪模式之分
  *             需要获取时间来进行斜坡函数计算
  */
static void Chassis_Keyboard_Move_Calculate( int16_t sMoveMax, int16_t sMoveRamp_inc, int16_t sMoveRamp_dec )
{
    static portTickType  ulCurrentTime = 0;
    static uint32_t  ulDelay = 0;

    static uint16_t w_cnt = 0;
    static bool W = 0;
    static uint16_t s_cnt = 0;
    static bool S = 0;
    static uint16_t a_cnt = 0;
    static bool A = 0;
    static uint16_t d_cnt = 0;
    static bool D = 0;
    static uint16_t q_cnt = 0;
    static bool Q = 0;
    static uint16_t e_cnt = 0;
    static bool E = 0;
    //    static uint8_t gimballeft_f = 0; //右转时云台向左边补偿
    //    static uint8_t gimbalright_f = 0; //左转时云台向右补偿
    //    static uint8_t chassisrate_f = 0; //超级电容让底盘加速
    Chassis_Standard_Move_Max = sMoveMax;//调整速度限幅,水平移动
    ulCurrentTime = xTaskGetTickCount();//当前系统时间

    //    if (IF_KEY_PRESSED_SHIFT)
    //    {
    //        chassisrate_f = 1;
    //    }

    //    if (flag && !IF_KEY_PRESSED_SHIFT)
    //    {
    //        chassisrate_f = 0;
    //    }

    if (ulCurrentTime >= ulDelay)//每10ms变化一次斜坡量
    {
        ulDelay = ulCurrentTime + 14;

        if (IF_KEY_PRESSED_W)
        {
            W = 1;
            timeXBack = 0;//按下前进则后退斜坡归零,方便下次计算后退斜坡
        }
        if(!IF_KEY_PRESSED_W)
        {
            w_cnt++;
        }
        if(w_cnt > 10)
        {
            w_cnt = 0;
            W = 0;
        }

        if (IF_KEY_PRESSED_S)
        {
            S = 1;
            timeXFron = 0;//同理
        }
        if(!IF_KEY_PRESSED_S)
        {
            s_cnt++;
        }
        if(s_cnt > 10)
        {
            s_cnt = 0;
            S = 0;
        }

        if (IF_KEY_PRESSED_D)
        {
            D=1;
            timeYRigh = 0;
        }
        if(!IF_KEY_PRESSED_D)
        {
            d_cnt++;
        }
        if(d_cnt > 10)
        {
            d_cnt = 0;
            D = 0;
        }

        if (IF_KEY_PRESSED_A)
        {
            A=1;
            timeYLeft = 0;
        }
        if(!IF_KEY_PRESSED_A)
        {
            a_cnt++;
        }
        if(a_cnt > 10)
        {
            a_cnt = 0;
            A = 0;
        }
        if(actChassis == CHASSIS_NORMAL)
        {
            if(IF_KEY_PRESSED_Q) //0.0021 0.0002
                Q = 1;
            if(!IF_KEY_PRESSED_Q)
                q_cnt++;
            if(q_cnt > 10)
            {
                q_cnt = 0;
                Q = 0;
            }

            if(IF_KEY_PRESSED_E) //0.0021 0.0002
                E = 1;
            if(!IF_KEY_PRESSED_E)
                e_cnt++;
            if(e_cnt > 10)
            {
                e_cnt = 0;
                E = 0;
            }

            if(Q)
                absolute_chassis_speed.vw = RAMP_float(-0.0028, absolute_chassis_speed.vw, 0.0005);
            else if(E)
                absolute_chassis_speed.vw = RAMP_float(0.0028, absolute_chassis_speed.vw, 0.0005);
            else if((!Q) || (!E))
                absolute_chassis_speed.vw = RAMP_float(0, absolute_chassis_speed.vw, 0.0006);
        }

        Slope_Chassis_Move_Fron = (int16_t)( Chassis_Standard_Move_Max *
                                             Chassis_Key_MoveRamp( W, &timeXFron, sMoveRamp_inc, sMoveRamp_dec ) );
        Slope_Chassis_Move_Back = (int16_t)( -Chassis_Standard_Move_Max *
                                             Chassis_Key_MoveRamp( S, &timeXBack, sMoveRamp_inc, sMoveRamp_dec ) );

        Slope_Chassis_Move_Left = (int16_t)( -Chassis_Standard_Move_Max *
                                             Chassis_Key_MoveRamp( A, &timeYRigh, sMoveRamp_inc / 1.5f, sMoveRamp_dec ) );

        Slope_Chassis_Move_Righ = (int16_t)( Chassis_Standard_Move_Max *
                                             Chassis_Key_MoveRamp( D, &timeYLeft, sMoveRamp_inc / 1.5f, sMoveRamp_dec ) );

        if(actChassis == CHASSIS_FOLLOW_GIMBAL)
        {
            if(((Gimbal_MotorYaw.motor_value->main_angle > 0)&&(Gimbal_MotorYaw.motor_value->main_angle < GIMBAL_YAW_ENCODER_NINETY1)) ||
                    ((Gimbal_MotorYaw.motor_value->main_angle > GIMBAL_YAW_ENCODER_NINETY2)&&(Gimbal_MotorYaw.motor_value->main_angle < 8192)))
            {
                absolute_chassis_speed.vx  = (Slope_Chassis_Move_Back + Slope_Chassis_Move_Fron) / 4000.0f; //前后计算
                absolute_chassis_speed.vy  = (Slope_Chassis_Move_Left + Slope_Chassis_Move_Righ) / 4000.0f; //左右计算
            }
            else
            {
                absolute_chassis_speed.vx  = -(Slope_Chassis_Move_Back + Slope_Chassis_Move_Fron) / 4000.0f; //前后计算
                absolute_chassis_speed.vy  = -(Slope_Chassis_Move_Left + Slope_Chassis_Move_Righ) / 4000.0f; //左右计算
            }
        }
        else
        {
            absolute_chassis_speed.vx  = (Slope_Chassis_Move_Back + Slope_Chassis_Move_Fron) / 4000.0f; //前后计算
            absolute_chassis_speed.vy  = (Slope_Chassis_Move_Left + Slope_Chassis_Move_Righ) / 4000.0f; //左右计算
        }
    }
}
/**
  * @brief  底盘键盘斜坡函数
  * @param  判断按键是否被按下, 时间量, 每次增加的量, 一共要减小的量
  * @retval 斜坡比例系数
  * @attention  0~1
  */
static float Chassis_Key_MoveRamp( uint8_t status, int16_t *time, int16_t inc, int16_t dec )
{
    float  factor = 0;
    factor = 0.15 * sqrt( 0.15 * (*time) );  //计算速度斜坡,time累加到296.3斜坡就完成

    if (status == 1)//按键被按下
    {
        if (factor < 1)//防止time太大
        {
            *time += inc;
        }
    }
    else    //按键松开
    {
        if (factor > 0)
        {
            *time -= dec;

            if (*time < 0)
            {
                *time = 0;
            }
        }
    }

    LimitValue_f( &factor, 1, 0 );//注意一定是float类型限幅

    return factor;  //注意方向
}


/**
  * @brief  鼠标控制底盘旋转,键盘QEC控制快速转圈
  * @param  速度最大输出量
  * @retval void
  * @attention  鼠标控制左右旋转
  */
static void Chassis_Mouse_Move_Calculate(void)
{
    absolute_chassis_speed.vw = RAMP_float(Chassis_Follow_PID.f_cal_pid(&Chassis_Follow_PID, Find_Y_AnglePNY(), 0), absolute_chassis_speed.vw, 0.0001);
}

/**
  * @brief  手动爬坡函数
  * @param
  * @retval void
  * @attention
  */
static void CHASSIS_SZUPUP_Mode_Ctrl(int16_t sMoveMax, int16_t sMoveRamp_inc, int16_t sMoveRamp_dec )
{
//    if( !IF_KEY_PRESSED_W || !IF_KEY_PRESSED_CTRL) //松开任意一个退出爬坡模式
//    {
//        actChassis = CHASSIS_NORMAL;//底盘退出爬坡模式
//    }
//    else
//    {
    modeChassis = CHASSIS_GYRO_MODE;//陀螺仪模式

    Chassis_Keyboard_Move_Calculate(sMoveMax, sMoveRamp_inc, sMoveRamp_dec );
    Chassis_Mouse_Move_Calculate();
//    }
}

/**
  * @brief  扭屁股模式(位置不变版)
  * @param  速度最大输出量    增加到最大量所需时间
  * @retval void
  * @attention  不管时间，扭到位了就换向
  */
//扭屁股换向选择
#define    CORGI_BEGIN    0
#define    CORGI_LEFT     1
#define    CORGI_RIGH     2
//#define    REVOLVE_SLOPE_CORGI       50       //底盘扭屁股模式斜坡,越大越快,完成时间越短
//#define    REVOLVE_MAX_CORGI         9000//5000     //底盘扭屁股最快速度,太大会让角度过大
uint16_t   stateCorgi = CORGI_BEGIN;  //标记往哪扭,默认不扭
bool       IfCorgiChange = FALSE;     //是否扭到了另一边
int16_t    corgi_angle_target = 0;    //左右目标角度

static void CHASSIS_MISS_Mode_Ctrl(void)
{
    int16_t  sAngleError   = 0;
    //    int16_t  Chassis_Revolve_Move_Max;
    //    float      Slope_Chassis_Revolve_Move;//键盘模式下扭头斜坡,主要用在扭屁股模式中

    //    Chassis_Revolve_Move_Max = sRevolMax;//最大速度设置
    //    Slope_Chassis_Revolve_Move = sRevolRamp;//扭头斜坡设置

    sAngleError = FindMinAnglePNY();
    //秘技:反复横跳......
    switch (stateCorgi)
    {
    case CORGI_BEGIN:  //以后可以试试用个随机(标志位不停取反),来让开始扭头的方向随机
        corgi_angle_target = -900;//可改最大移动角度,自动闪避模式下被击打时的扭腰角度
        IfCorgiChange = FALSE;
        stateCorgi    = CORGI_LEFT;
        break;

    case CORGI_LEFT:
        corgi_angle_target = -1024;//可改最大移动角度
        IfCorgiChange = FALSE;

        if (sAngleError < -700)//角度误差大于700
        {
            stateCorgi = CORGI_RIGH;
            IfCorgiChange = TRUE;//标记可以换向
        }
        break;

    case CORGI_RIGH:
        corgi_angle_target = 1024;
        IfCorgiChange = FALSE;

        if (sAngleError > 700)//角度误差大于700
        {
            stateCorgi = CORGI_LEFT;
            IfCorgiChange = TRUE;//标记可以换向
        }
        break;
    }
    absolute_chassis_speed.vw = Chassis_Follow_PID.f_cal_pid(&Chassis_Follow_PID, (sAngleError - corgi_angle_target), 0); //PID使底盘跟随云台速度
    absolute_chassis_speed.vw /= 2;
}
/***********************************************************************************对底盘电机进行的各种处理**********************************************************************************/

/*****************底盘功率*************************/
//不同模式下的最高速度
#define    CHAS_CURRENT_LIMIT_Lv0        25000
#define    CHAS_CURRENT_LIMIT_Lv1        27000    //四个轮子的速度总和最大值,单个输出*4,限功率调比例可用
#define    CHAS_CURRENT_LIMIT_Lv2        29000
#define    CHAS_CURRENT_LIMIT_Lv3        31000
float WARNING_REMAIN_POWER = 30;//裁判系统剩余焦耳能量低于这个数值则开始限功率,40扭屁股会超功率,平地开不会超
float fChasCurrentLimit = CHAS_CURRENT_LIMIT_Lv3;//限制4个轮子的速度总和
float fTotalCurrentLimit;//电流分配,平地模式下分配是均匀的
/**
  * @brief  底盘功率限制
  * @param  void
  * @retval void
  * @attention  在底盘输出计算后调用,主要是比例的算法,ICRA
  */
static void Chassis_Power_Limit()
{
    /*********************祖传算法*************************/
    float    kLimit = 0;//功率限制系数
    float    chassis_totaloutput = 0;//统计总输出电流
    float    Joule_Residue = 0;//剩余焦耳缓冲能量
    uint16_t Power_realtime = 0;
    uint16_t Power_limit = 0;
    int16_t  judgDataCorrect = 0;//裁判系统数据是否可用
    static int32_t judgDataError_Time = 0;

    Power_realtime = JUDGE_fGetChassisPower(); //获取实时底盘功率
    Power_limit = JUDGE_usGetPowerLimit();  //获取功率限制
    judgDataCorrect = JUDGE_sGetDataState();//裁判系统数据是否可用
    Joule_Residue = JUDGE_fGetRemainEnergy();//剩余焦耳能量

    if(Power_limit == (uint16_t)50)
        fChasCurrentLimit = CHAS_CURRENT_LIMIT_Lv0;
    else if(Power_limit == (uint16_t)55)
        fChasCurrentLimit = CHAS_CURRENT_LIMIT_Lv1;
    else if(Power_limit == (uint16_t)60)
        fChasCurrentLimit = CHAS_CURRENT_LIMIT_Lv2;
    else if(Power_limit == (uint16_t)65)
        fChasCurrentLimit = CHAS_CURRENT_LIMIT_Lv3;
    else
        fChasCurrentLimit = CHAS_CURRENT_LIMIT_Lv0;
    //统计底盘总输出
    chassis_totaloutput = abs_float(Chassis_Motor[0].Motor_PID_Speed.out) + abs_float(Chassis_Motor[1].Motor_PID_Speed.out)
                          + abs_float(Chassis_Motor[2].Motor_PID_Speed.out) + abs_float(Chassis_Motor[3].Motor_PID_Speed.out);
    if(judgDataCorrect == JUDGE_DATA_ERROR)//裁判系统无效时强制限速
    {
        judgDataError_Time++;
        if(judgDataError_Time > 100)
        {
            fTotalCurrentLimit = fChasCurrentLimit/4;//降为最大的1/4
        }
    }
    else
    {
        judgDataError_Time = 0;
        //剩余焦耳量过小,开始限制输出,限制系数为平方关系
        if(Joule_Residue < WARNING_REMAIN_POWER)
        {
            kLimit = (float)(Joule_Residue / WARNING_REMAIN_POWER)
                     * (float)(Joule_Residue / WARNING_REMAIN_POWER);

            fTotalCurrentLimit = kLimit * fChasCurrentLimit;
        }
        else   //焦耳能量恢复到一定数值
        {
            fTotalCurrentLimit = fChasCurrentLimit;
        }
    }

    //底盘各电机电流重新分配
    if (chassis_totaloutput > fTotalCurrentLimit && actChassis != CHASSIS_SZUPUP)
    {
        Chassis_Motor[0].Motor_PID_Speed.out = (float)(Chassis_Motor[0].Motor_PID_Speed.out / chassis_totaloutput * fTotalCurrentLimit);
        Chassis_Motor[1].Motor_PID_Speed.out = (float)(Chassis_Motor[1].Motor_PID_Speed.out / chassis_totaloutput * fTotalCurrentLimit);
        Chassis_Motor[2].Motor_PID_Speed.out = (float)(Chassis_Motor[2].Motor_PID_Speed.out / chassis_totaloutput * fTotalCurrentLimit);
        Chassis_Motor[3].Motor_PID_Speed.out = (float)(Chassis_Motor[3].Motor_PID_Speed.out / chassis_totaloutput * fTotalCurrentLimit);
    }
    else if(chassis_totaloutput > fTotalCurrentLimit && actChassis == CHASSIS_SZUPUP)
    {
        Chassis_Motor[0].Motor_PID_Speed.out = (float)(Chassis_Motor[0].Motor_PID_Speed.out / chassis_totaloutput * fTotalCurrentLimit * 0.55f);
        Chassis_Motor[1].Motor_PID_Speed.out = (float)(Chassis_Motor[1].Motor_PID_Speed.out / chassis_totaloutput * fTotalCurrentLimit * 0.55f);
        Chassis_Motor[2].Motor_PID_Speed.out = (float)(Chassis_Motor[2].Motor_PID_Speed.out / chassis_totaloutput * fTotalCurrentLimit * 1.8f);
        Chassis_Motor[3].Motor_PID_Speed.out = (float)(Chassis_Motor[3].Motor_PID_Speed.out / chassis_totaloutput * fTotalCurrentLimit * 1.8f);
    }
}

/**
  * @brief  设置底盘电机输出电流最大值
  * @param  电机1最大值，电机2最大值，电机3最大值，电机4最大值
  * @retval void
  * @attention
  */
static void SetChassisMotorMaxCurrent(const int16_t max1, const int16_t max2, const int16_t max3, const int16_t max4)
{
    Chassis_Motor[0].Motor_PID_Speed.max_out = max1;
    Chassis_Motor[1].Motor_PID_Speed.max_out = max2;
    Chassis_Motor[2].Motor_PID_Speed.max_out = max3;
    Chassis_Motor[3].Motor_PID_Speed.max_out = max4;
}


/**
  * @brief  根据不同情况进行限流
  * @param  void
  * @retval void
  * @attention void
  */
void LimitChassisMotorCurrent(void)
{
    switch(actChassis)
    {
    case CHASSIS_NORMAL:    //底盘不跟随云台
        switch(EnvironmentMode)
        {
        case NOMAL:      //普通地形
            SetChassisMotorMaxCurrent(NOMOAL_CHASSIS_MAX1, NOMOAL_CHASSIS_MAX2, NOMOAL_CHASSIS_MAX3, NOMOAL_CHASSIS_MAX4);
            break;
        case CLIMBING:    //爬坡地形
            SetChassisMotorMaxCurrent(CLIMBING_CHASSIS_MAX1, CLIMBING_CHASSIS_MAX2, CLIMBING_CHASSIS_MAX3, CLIMBING_CHASSIS_MAX4);
            break;
        }
        break;
    case CHASSIS_FOLLOW_GIMBAL:      //底盘跟随云台
    case CHASSIS_GYROSCOPE:      //小陀螺模式
    case CHASSIS_CORGI:        //扭屁股模式，跟小陀螺限流相同
        switch(EnvironmentMode)
        {
        case NOMAL:      //普通地形
            SetChassisMotorMaxCurrent(NOMAL_GYRO_CHASSIS_MAX1, NOMAL_GYRO_CHASSIS_MAX2, NOMAL_GYRO_CHASSIS_MAX3, NOMAL_GYRO_CHASSIS_MAX4);
            break;
        case CLIMBING:    //爬坡地形
            SetChassisMotorMaxCurrent(CLIMBING_GYRO_CHASSIS_MAX1, CLIMBING_GYRO_CHASSIS_MAX2, CLIMBING_GYRO_CHASSIS_MAX3, CLIMBING_GYRO_CHASSIS_MAX4);
            break;
        }
        break;
    default:
        break;
    }
}

/*
 * @param absolute_speed 绝对坐标需要的速度
 * @param angle 云台相对于底盘的角度
 */
static void Absolute_Cal(Chassis_Speed *absolute_speed, float angle )
{
    float angle_hd = angle * PI / 180;
    Chassis_Speed temp_speed;
    temp_speed.vw = absolute_speed->vw;
    temp_speed.vx = absolute_speed->vx * cos(angle_hd) - absolute_speed->vy * sin(angle_hd);
    temp_speed.vy = absolute_speed->vx * sin(angle_hd) + absolute_speed->vy * cos(angle_hd);
    mecanum_calc(&temp_speed, chassis_setspeed);
}

static void mecanum_calc(Chassis_Speed *speed, int16_t *out_speed)
{
    int16_t wheel_rpm[4];
    float wheel_rpm_ratio;

    wheel_rpm_ratio = 60.0f / (WHEEL_PERIMETER * 3.14f) * CHASSIS_DECELE_RATIO * 1000;

    wheel_rpm[0] = ( speed->vx - speed->vy - speed->vw * (LENGTH_A + LENGTH_B)) * wheel_rpm_ratio;
    wheel_rpm[1] = ( speed->vx + speed->vy + speed->vw * (LENGTH_A + LENGTH_B)) * wheel_rpm_ratio;
    wheel_rpm[2] = (-speed->vx + speed->vy - speed->vw * (LENGTH_A + LENGTH_B)) * wheel_rpm_ratio;
    wheel_rpm[3] = (-speed->vx - speed->vy + speed->vw * (LENGTH_A + LENGTH_B)) * wheel_rpm_ratio;

    memcpy(out_speed, wheel_rpm, 4 * sizeof(int16_t));
}

static void Mecanum_Set_Motor_Speed(int16_t *out_speed, Motortype *Motor )
{
    Motor[0].motor_value->target_speed_rpm = out_speed[0];
    Motor[1].motor_value->target_speed_rpm = out_speed[1];
    Motor[2].motor_value->target_speed_rpm = out_speed[2];
    Motor[3].motor_value->target_speed_rpm = out_speed[3];

}

/**
  * @brief  找出与+-y轴最小偏差角
  * @param  void
  * @retval 偏差角，角度制
  * @attention 通过遥控器/键盘
  */
static float FindMinAnglePNY(void)
{
    float temp1 = Gimbal_MotorYaw.motor_value->main_angle - GIMBAL_YAW_ENCODER_MIDDLE1;
    float temp2 = Gimbal_MotorYaw.motor_value->main_angle - GIMBAL_YAW_ENCODER_MIDDLE2;
    if(temp1 > 4096)
        temp1 -= 8192;
    else if(temp1 < -4096)
        temp1 += 8192;
    if(temp2 > 4096)
        temp2 -= 8192;
    else if(temp2 < -4096)
        temp2 += 8192;
    return (abs((int32_t)temp1) < abs((int32_t)temp2) ? temp1 : temp2);
}
/**
  * @brief  找出与+y轴最小偏差角
  * @param  void
  * @retval 偏差角，角度制
  * @attention 通过遥控器/键盘
  */
static float Find_Y_AnglePNY(void)
{
//    int32_t err;
//    err = Gimbal_MotorYaw.motor_value->main_angle - GIMBAL_YAW_ENCODER_MIDDLE1;
//    if(abs(err) > 4096)
//    {
//        err = 8192 - abs(err);
//        err = ((Gimbal_MotorYaw.motor_value->main_angle - GIMBAL_YAW_ENCODER_MIDDLE1) > 0) ? -err : err;
//    }
//    else err = err;
//    return err;
    float temp1 = Gimbal_MotorYaw.motor_value->main_angle - GIMBAL_YAW_ENCODER_MIDDLE1;
    float temp2 = Gimbal_MotorYaw.motor_value->main_angle - GIMBAL_YAW_ENCODER_MIDDLE2;
    float mintemp1;
    if(temp1 > 4096)
        temp1 -= 8192;
    else if(temp1 < -4096)
        temp1 += 8192;
    if(temp2 > 4096)
        temp2 -= 8192;
    else if(temp2 < -4096)
        temp2 += 8192;

    mintemp1 = (abs((int32_t)temp1) < abs((int32_t)temp2) ? temp1 : temp2);
    return mintemp1;
}
/**
  * @brief  找出与45°轴最小偏差角
  * @param  void
  * @retval 偏差角，角度制
  * @attention 通过遥控器/键盘
  */
float FindMinAngleFortyFive(void)
{
    float temp1 = Gimbal_MotorYaw.motor_value->main_angle - GIMBAL_YAW_ENCODER_FORTYFIVE1;
    float temp2 = Gimbal_MotorYaw.motor_value->main_angle - GIMBAL_YAW_ENCODER_FORTYFIVE2;
    float temp3 = Gimbal_MotorYaw.motor_value->main_angle - GIMBAL_YAW_ENCODER_FORTYFIVE3;
    float temp4 = Gimbal_MotorYaw.motor_value->main_angle - GIMBAL_YAW_ENCODER_FORTYFIVE4;
    float mintemp1, mintemp2;
    if(temp1 > 4096)
        temp1 -= 8192;
    else if(temp1 < -4096)
        temp1 += 8192;
    if(temp2 > 4096)
        temp2 -= 8192;
    else if(temp2 < -4096)
        temp2 += 8192;
    if(temp3 > 4096)
        temp3 -= 8192;
    else if(temp3 < -4096)
        temp3 += 8192;
    if(temp4 > 4096)
        temp4 -= 8192;
    else if(temp4 < -4096)
        temp4 += 8192;
    mintemp1 = (abs((int32_t)temp1) < abs((int32_t)temp2) ? temp1 : temp2);
    mintemp2 = (abs((int32_t)temp3) < abs((int32_t)temp4) ? temp3 : temp4);
    return (abs((int32_t)mintemp1) < abs((int32_t)mintemp2) ? mintemp1 : mintemp2);
}

/////////////////Q键选择左转90度//////////////////////
//  if(!IF_KEY_PRESSED_Q)//    Q松开
//  {
//    Chass_Switch_Q = 1;
//  }
//  if (IF_KEY_PRESSED_Q && !IF_KEY_PRESSED_CTRL
//      && Chass_Switch_Q == 1)//Q按下,切换成扭屁股(不用一直按F)
//  {
//    Chass_Switch_Q = 0;
//    Chass_Key_Q_Change ++;
//    Chass_Key_Q_Change %= 2;
//    actChassis = CHASSIS_TURN_LEFT;//记得写个能退出扭屁股模式的函数
//    actGimbal = GIMBAL_TURN_LEFT;
//  }
/////////////////E键选择左转90度//////////////////////
//  if(!IF_KEY_PRESSED_E)//    Q松开
//  {
//    Chass_Switch_E = 1;
//  }
//  if (IF_KEY_PRESSED_E && !IF_KEY_PRESSED_CTRL
//      && Chass_Switch_E == 1)//Q按下,切换成扭屁股(不用一直按F)
//  {
//    Chass_Switch_E = 0;
//    Chass_Key_E_Change ++;
//    Chass_Key_E_Change %= 2;
//    actChassis = CHASSIS_TURN_RIGHT;//记得写个能退出扭屁股模式的函数
//    actGimbal = GIMBAL_TURN_RIGHT;
//  }
/**
  * @brief  开机复位，云台不动，底盘转到正方向
  * @param  void
  * @retval void
  * @attention void
  */
static void Chassis_open_init(void)
{
    uint32_t time=0;
    bool return_flag = true;
    while(return_flag)
    {
        if(gimbal_return_finish_flag || time > 10000)
        {
            time=0;
            absolute_chassis_speed.vx = 0.0f;
            absolute_chassis_speed.vy = 0.0f;
            absolute_chassis_speed.vw = 0.0f;
            Gimbal_MotorYaw.motor_value->total_angle = 0;
            Gimbal_MotorYaw.motor_value->main_angle = 0;
            Gimbal_MotorYaw.motor_value->round_cnt = 0;
            Gimbal_MotorYaw.motor_value->target_angle = Gimbal_MotorYaw.motor_value->main_angle;
            Cloud_Angle_Target[YAW][GYRO] = IMU_angle[0];
            Cloud_Angle_Target[PITCH][GYRO] = IMU_angle[1];
            return_flag = false;
            gimbal_return_finish_flag = false;
        }
        else
        {
            time++;
            absolute_chassis_speed.vx = 0.0f;
            absolute_chassis_speed.vy = 0.0f;
            absolute_chassis_speed.vw = RAMP_float(0.0022f, absolute_chassis_speed.vw, 0.00001);
        }

        Absolute_Cal(&absolute_chassis_speed, 0);
        Mecanum_Set_Motor_Speed(chassis_setspeed, Chassis_Motor); //设置各个电机的目标速度
        /************************************底盘电机速度环计算*********************************************/
        Chassis_Motor[0].Motor_PID_Speed.f_cal_pid(&Chassis_Motor[0].Motor_PID_Speed,
                Chassis_Motor[0].motor_value->speed_rpm,
                -Chassis_Motor[0].motor_value->target_speed_rpm);

        Chassis_Motor[1].Motor_PID_Speed.f_cal_pid(&Chassis_Motor[1].Motor_PID_Speed,
                Chassis_Motor[1].motor_value->speed_rpm,
                +Chassis_Motor[1].motor_value->target_speed_rpm);

        Chassis_Motor[2].Motor_PID_Speed.f_cal_pid(&Chassis_Motor[2].Motor_PID_Speed,
                Chassis_Motor[2].motor_value->speed_rpm,
                -Chassis_Motor[2].motor_value->target_speed_rpm);

        Chassis_Motor[3].Motor_PID_Speed.f_cal_pid(&Chassis_Motor[3].Motor_PID_Speed,
                Chassis_Motor[3].motor_value->speed_rpm,
                +Chassis_Motor[3].motor_value->target_speed_rpm);
        /************************************将电流参数发送给电机*********************************************/
        set_chassis_current(&hcan1, Chassis_Motor[0].Motor_PID_Speed.out,
                            Chassis_Motor[1].Motor_PID_Speed.out,
                            Chassis_Motor[2].Motor_PID_Speed.out,
                            Chassis_Motor[3].Motor_PID_Speed.out);
        osDelay(1); //pid控制频率1000hz
    }
}
