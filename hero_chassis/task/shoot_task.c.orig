#include "shoot_task.h"
#include "param.h"
#include "type.h"
#include "mysystem.h"
#include "judge.h"
eShootAction actShoot = SHOOT_NORMAL;
eShootAction actShoot_last = SHOOT_NORMAL;
eShootState ShootState = UNSTART;

static fp32 Ammunition_Motor_Position_pid[3] = {7, 0.8, 0};
static fp32 Ammunition_Motor_Speed_pid[3] = {50, 30, 10};
const static fp32 Mocalun_l_speed[3] = {8, 0.4, 0};
const static fp32 Mocalun_r_speed[3] = {8, 0.4, 0};
fp32 nothing[3] = {0, 0, 0};
bool protect_flag_sutck=0;
bool protect_flag_heat=0;

void ShootFun(void const *argument)
{
    portTickType currentTime;

    REVOLVER_InitArgument();

    while (1)
    {
        currentTime = xTaskGetTickCount(); //当前系统时间

        Limit_something();

        switch(ControlMode)
        {
        case REMOTE:
            RemoteShoot();
            REVOLVER_Key_Ctrl();
            break;
        case KEYBOARD:
            SHOOT_Mode_Choose();
            REVOLVER_Key_Ctrl();
            break;
        }

        vTaskDelayUntil(&currentTime, TIME_STAMP_2MS); //绝对延时
    }
}

static void REVOLVER_InitArgument(void)
{
    //(Motortype*motor,int ID,float pid1[3], outmax1, imax1,       float pid2[3], outmax2, imax2
    Motor_Init2(&mocalun_l, 2, nothing, PID_DELTA, 0, 0, 3e38, 0, 0, 8192, 0, Mocalun_l_speed, PID_DELTA, 30000, 4000, 3e38, 0, 0.1,  0, 0);
    Motor_Init2(&mocalun_r, 3, nothing, PID_DELTA, 0, 0, 3e38, 0, 0, 8192, 0, Mocalun_r_speed, PID_DELTA, 30000, 4000, 3e38, 0, 0.1,  0, 0);
    Motor_Init(&Ammunition_Motor, 6, Ammunition_Motor_Position_pid, PID_DELTA, REVOLVER_PID_POSITION_OUTMAX1, REVOLVER_PID_POSITION_IMAX1, 3e38, 0, 0, 8192, 0,
               Ammunition_Motor_Speed_pid, PID_DELTA, REVOLVER_PID_SPEED_OUTMAX2, REVOLVER_PID_SPEED_IMAX2, 3e38, 0, 0.1, 0, 0);
}

/**
  * @brief  键盘模式下发弹模式选择
  * @param  void
  * @retval void
  * @attention  普通模式清零计算,且不发弹
  */
static uint16_t shoot_cnt = 0;
static void SHOOT_Mode_Choose(void)
{
    static uint32_t shoot_left_time = 0;//计算左键连按时间,时间过长切换成连发

    if(ShootState == UNSTART)
    {
        mocalun_l.motor_value->target_speed_rpm = 0;
        mocalun_r.motor_value->target_speed_rpm = 0;
        Ammunition_Motor.motor_value->target_speed_rpm = 0;
        ShootState = START;
    }
    else if(ShootState != UNSTART && !(protect_flag_sutck || protect_flag_heat))
    {
        if(IF_MOUSE_PRESSED_LEFT &&	shoot_left_time <= TIME_STAMP_300MS)//左键发弹
        {
            shoot_left_time++;//判断长按,切换
            actShoot_last = actShoot;
            actShoot = SHOOT_TRIPLE;
            mocalun_l.motor_value->target_speed_rpm = -5760;
            mocalun_r.motor_value->target_speed_rpm = 5760;
        }
        else if(IF_MOUSE_PRESSED_LEFT && shoot_left_time > TIME_STAMP_300MS)	//连按大于200ms
        {
            shoot_left_time++;
            shoot_cnt++;
            shoot_cnt = shoot_cnt > 65530? 10 : shoot_cnt;
            actShoot_last = actShoot;
            actShoot = SHOOT_TRIPLE;//连发模式
            mocalun_l.motor_value->target_speed_rpm = -5760;
            mocalun_r.motor_value->target_speed_rpm = 5760;
        }
        else if(IF_KEY_PRESSED_C)
        {
            actShoot_last = actShoot;
            actShoot = SHOOT_NORMAL;//普通模式
            shoot_cnt = 0;
            mocalun_l.motor_value->target_speed_rpm = 0;
            mocalun_r.motor_value->target_speed_rpm = 0;
        }
        else if(IF_KEY_PRESSED_X)
        {
            actShoot_last = actShoot;
            actShoot = RELAX;//放松模式
            shoot_cnt = 0;
            mocalun_l.motor_value->target_speed_rpm = 0;
            mocalun_r.motor_value->target_speed_rpm = 0;
        }
        else if(!IF_MOUSE_PRESSED_LEFT && actShoot_last != RELAX)
        {
            actShoot_last = actShoot;
            actShoot = SHOOT_NORMAL;
            shoot_left_time = 0;
        }
    }
}

/**
  * @brief  拨盘重启
  * @param  void
  * @retval void
  * @attention 枪口超热量重置
  */
void REVOLVER_Rest(void)
{
    //PID积分清零
    Ammunition_Motor.Motor_PID_Speed.out = 0;
    Ammunition_Motor.Motor_PID_Speed.Pout = 0;
    Ammunition_Motor.Motor_PID_Speed.Iout = 0;
}

static void RemoteShoot(void)
{
    static u8 flag = 0;
    static u8 Ammunition_flag = 0;
    if(!(protect_flag_sutck || protect_flag_heat))
    {
        if((rc.sw1 == 3 && rc.sw2 == 2) || flag == 1 || (flag == 0 && Ammunition_flag == 0))
        {
            flag = 1;
            Ammunition_Motor.motor_value->target_speed_rpm = 0;
            mocalun_l.motor_value->target_speed_rpm = 0;
            mocalun_r.motor_value->target_speed_rpm = 0;
        }
        if((rc.sw1 == 3 && rc.sw2 == 3) || flag == 2)
        {
            flag = 2;
            mocalun_l.motor_value->target_speed_rpm = -5760;  //3200/5.9 4000/9.5 4800/12.6 5120 12.2 6400/15.0   转速/射速
            mocalun_r.motor_value->target_speed_rpm = 5760;
        }
        if((rc.sw1 == 3 && rc.sw2 == 1) || flag == 3)
        {
            flag = 3;
            mocalun_l.motor_value->target_speed_rpm = -6400;
            mocalun_r.motor_value->target_speed_rpm = 6400;
        }
        if((rc.sw1 == 2 && rc.sw2 == 2) || Ammunition_flag == 4)
        {
            Ammunition_flag = 4;
            actShoot_last = actShoot;
            actShoot = SHOOT_NORMAL;//普通模式
        }
        if((rc.sw1 == 2 && rc.sw2 == 3) || Ammunition_flag == 5)
        {
            Ammunition_flag = 5;
            actShoot_last = actShoot;
            actShoot = SHOOT_TRIPLE;//连发模式
            shoot_cnt = 10;
        }
        if((rc.sw1 == 2 && rc.sw2 == 1) || Ammunition_flag == 6)
        {
            Ammunition_flag = 6;
            actShoot_last = actShoot;
            actShoot = RELAX;//放松模式
        }
    }

}
/************************底盘键盘模式各类模式小函数****************************/

/*******键盘模式************/

/**
  * @brief  拨盘的键盘模式
  * @param  void
  * @retval void
  * @attention 键盘用位置环控制
  */
static void REVOLVER_Key_Ctrl(void)
{
    /*------ 左键抬起后才能打下一颗 -------*/
    switch(actShoot)
    {
    case SHOOT_NORMAL:
    {
        Ammunition_Motor.motor_value->target_speed_rpm = 0;
        break;
    }
    case SHOOT_TRIPLE:
    {
        if(shoot_cnt > 1)
            Ammunition_Motor.motor_value->target_speed_rpm = -10;
        else
            Ammunition_Motor.motor_value->target_speed_rpm = 0;
        break;
    }
    case RELAX:
    {
        PID_clear(&Ammunition_Motor.Motor_PID_Speed);
    }
    default:
        break;
    }
    Ammunition_Motor.Motor_PID_Speed.f_cal_pid(&Ammunition_Motor.Motor_PID_Speed,
            Ammunition_Motor.motor_value->speed_rpm,
            Ammunition_Motor.motor_value->target_speed_rpm);

    mocalun_l.Motor_PID_Speed.f_cal_pid(&mocalun_l.Motor_PID_Speed, mocalun_l.motor_value->speed_rpm, mocalun_l.motor_value->target_speed_rpm);
    mocalun_r.Motor_PID_Speed.f_cal_pid(&mocalun_r.Motor_PID_Speed, mocalun_r.motor_value->speed_rpm, mocalun_r.motor_value->target_speed_rpm);
    set_moto1234_current(&hcan2, 0, mocalun_l.Motor_PID_Speed.out, mocalun_r.Motor_PID_Speed.out, 0);
    /*can1底盘轮子1234 5YAW 6拨弹盘 78空
    can2 1空 2摩擦轮l 3摩擦轮r 4空 5PITCH 678空*/
}

/*********************射频热量限制****************************/

/**
  * @brief  枪管热量限制
  * @param  void
  * @retval 热量是否超限
  * @attention  超限要重置一下拨盘,根据剩余可发弹量来做闭环
  *             如果做双枪管则此函数不适用
  */
bool Revolver_Heat_Limit(void)
{
    //static uint16_t  usShootNumAllow  = 0;
    static uint16_t  usHeatBuffer = 0;
    static bool  IfShootAllow  =  FALSE;

    static  uint16_t  usShootNumBuffer = 0;
    static  portTickType  ulShootTimeRecordReal = 0;
    static  portTickType  msShootTimeRecord = 0;
    //static  uint16_t  usShootHeatRecord = 0;
    static  uint16_t  usShootNumPrev = 0;
    //static  uint16_t  usHeatPrev        = 0;

    //static  uint32_t  ulOfflineCnt      = 0;
    uint16_t  usHeatReal = 0;
    uint16_t  usShootNumReal = 0;
    uint16_t  usHeatOneShoot = 70;  //裁判系统检测到打一颗，枪口热量加10，与其初速度无关
    uint16_t  usHeatLimit;
    //static  uint32_t  ShootNumBuffer_Error = 0;//计数长时间过大，认为出错，清零

    /* 读取热量 */
    usHeatReal = JUDGE_usGetRemoteHeat42();
    /* 读取热量上限*/
    usHeatLimit = JUDGE_usGetHeatLimit();

    /* 读取射击次数 */
    usShootNumReal = JUDGE_usGetShootNum();

    /* 记录当前时间 */
    ulShootTimeRecordReal = xTaskGetTickCount();

    /* 只要过100MS枪口冷却值减 */
    if(ulShootTimeRecordReal > msShootTimeRecord)
    {
        msShootTimeRecord = ulShootTimeRecordReal + 100;
        usShootNumBuffer -= JUDGE_usGetShootCold() / 10;
    }

    /* 只要打了弹就增加 */
    if (usShootNumReal > usShootNumPrev)
    {
        usShootNumBuffer += 10;
    }

    /* 剩余热量 */
    if (usHeatReal <= usHeatLimit)
    {
        usHeatBuffer = usHeatLimit - usHeatReal;
    }
    else
    {
        usHeatBuffer = 0;
    }

    if (usHeatBuffer > usHeatOneShoot)//剩余热量大于打一发所需热量
    {
        /* 还能打出的子弹数目 */
        IfShootAllow = TRUE;
    }
    else
    {
        IfShootAllow = FALSE;
    }
    usShootNumPrev = usShootNumReal;
    return IfShootAllow;
}

/*****************************卡弹处理**************************************/
/************卡弹************/
#define Stuck_Revol_PIDTerm   27500      //PID输出大于这个数则认为有可能卡弹
#define Stuck_Speed_Low       5         //测量速度低于这个数,则认为有可能卡弹

#define Stuck_SpeedPID_Time   60        //速度连续 ms过小,PID连续  ms过大
#define Stuck_Relax_Time   400       //放松时间,时间越长倒得越多
/**
  * @brief  速度环式卡弹处理
  * @param  void
  * @retval void
  * @attention  卡住就松力，过一会再重新上力
  */
static void REVOL_SpeedStuck(void)
{
    static uint16_t  stuck_time    = 0;//卡弹计时
    static uint16_t  relax_time = 0;//放松计时
    static bool Revol_Speed_ifStuck = FALSE;//卡弹判断

    if (Revol_Speed_ifStuck == TRUE)//已确认卡弹,开始放松计时
    {
        actShoot_last = actShoot;
        actShoot = RELAX;
        protect_flag_sutck = 1;
        relax_time++;//放松一定时间

        if (relax_time > Stuck_Relax_Time)//放松完成
        {
            relax_time = 0;
            actShoot = actShoot_last;  //继续上次的射击模式
            protect_flag_sutck = 0;
            Revol_Speed_ifStuck = FALSE;//可以正转
        }
    }
    else
    {
        if ( fabs(Ammunition_Motor.Motor_PID_Speed.out) >= Stuck_Revol_PIDTerm //PID输出过大
                && abs(Ammunition_Motor.motor_value->speed_rpm) <= Stuck_Speed_Low)//速度过低
        {
            stuck_time++;//卡弹计时
        }
        else
        {
            stuck_time = 0;//没有长时间卡弹,及时清零
        }

        if (stuck_time > Stuck_SpeedPID_Time)//卡了超过60ms
        {
            stuck_time = 0;
            Revol_Speed_ifStuck = TRUE;//标记可以进入放松计时
        }
    }
}
/**
  * @brief  防卡弹，防超热量，各种防
  * @param  void
  * @retval void
  * @attention  void
  */
static void Limit_something(void)
{
    if((Revolver_Heat_Limit() == FALSE) && !IF_KEY_PRESSED_CTRL)//紧急情况 不管热量强行射击
    {
        actShoot_last = actShoot;
        actShoot = RELAX;
        protect_flag_heat = 1;
    }
    else
    {
        if(!IF_KEY_PRESSED_CTRL)
           actShoot = actShoot_last;
        protect_flag_heat = 0;
    }
    REVOL_SpeedStuck();
}
